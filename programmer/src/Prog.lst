
AVRASM ver. 1.30  C:\AVRwork\ProgN64\Prog.asm Fri Jan 28 00:33:50 2000


          .LISTMAC 
         ;.include "m103def.inc"
          .include "4414def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number		:AVR000
         ;* File Name		:"4414def.inc"
         ;* Title		:Register/Bit Definitions for the AT90S4414
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax		:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail	:avr@atmel.com
         ;* Target MCU		:AT90S4414
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB		;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16		;output to PORTB
         ;*
         ;* in	r16,TIFR		;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0		;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set		;jump if set
         ;* ...				;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S4414
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH	=$3e
          .equ	SPL	=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	OCR0	=$31
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$25
          .equ	ICR1L	=$24
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	USR	=$0b
          .equ	UCR	=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
         
         
         ;***** Bit Definitions
          .equ	INT1	=7
          .equ	INT0	=6
         
          .equ	INTF1	=7
          .equ	INTF0	=6
         
          .equ	TOIE1	=7
          .equ	OCIE1A	=6
          .equ	OCIE1B	=5
          .equ	TICIE1	=3
          .equ	TOIE0	=1
          .equ	OCIE0	=0
         
          .equ	TOV1	=7
          .equ	OCF1A	=6
          .equ	OCF1B	=5
          .equ	ICF1	=3
          .equ	TOV0	=1
          .equ	OCF0	=0
         
          .equ	SRE	=7
          .equ	SRW	=6
          .equ	SE	=5
          .equ	SM	=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
          .equ	COM01	=5
          .equ	COM00	=4
          .equ	CTC0	=3
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
          .equ	WDDE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
          .equ	PA7	=7
          .equ	PA6	=6
          .equ	PA5	=5
          .equ	PA4	=4
          .equ	PA3	=3
          .equ	PA2	=2
          .equ	PA1	=1
          .equ	PA0	=0
         
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
          .equ	PC7	=7
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3
         
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
          .equ	SPIF	=7
          .equ	WCOL	=6
         
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
          .equ	ACD	=7
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND  =$15F	;Last On-Chip SRAM Location
          .equ	XRAMEND =$FFFF
          .equ	E2END	=$FF
          .equ	FLASHEND=$7FF
         
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	ICP1addr=$003	;Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$004	;Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$005	;Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$006	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$007	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$008	;SPI Interrupt Vector Address
          .equ	URXCaddr=$009	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00a	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00b	;UART Transmit Complete Interrupt Vector Address
          .equ	ACIaddr =$00c	;Analog Comparator Interrupt Vector Address
         
         
          .def	t0 =	r16
          .def	t1 =	r17
          .def	s0 =	r18
          .def	s1 =	r19
          .def	s2 =	r20
          .def	s3 =	r21
          .def	c0 =	r22
          .def	c1 =	r23
          .def	crcl =	r24
          .def	crch =	r25
         
         
          .cseg
          	.org	0
000000 c1a4      	rjmp	main
          	.org	URXCaddr
000009 9508      	ret ;rjmp	rxd_int	;UART Receive Complete Interrupt Vector Address
          	.org	UDREaddr
00000a 9508      	ret ;rjmp		;UART Data Register Empty Interrupt Vector Address
          	.org	UTXCaddr
00000b 9508      	ret ;rjmp		;UART Transmit Complete Interrupt Vector Address
         
         ; UDR is регистр данных
         ; USR is регистр статуса
         ; USR.RXC is 1 приём завершён
         ; USR.TXC is 1 передача завершена
         ; USR.UDR is 1 когда байт для передачи уже переписан в сдвиховый регистр
         ; USR.FE  is 1 при ошибки фрейма (сбрасывается сам)
         ; USR.DOR is 1 когда переполнение данными (сбрасывается сам)
         ; UCR is регистр управления
         ; UCR.RXCIE is 1 разрешить прерывание когда завершение прочтения байта
         ; UCR.TXCIE is 1 тоже самое но по завершению передачи
         ; UCR.UDRIE is 1 азрешить прерывание когда регистр передачи пуст
         ; UCR.RXEN is 1 разрешить приём
         ; UCR.TXEN is 1 разрешить передачу
         ; UCR.CHR9 is 1 разрешить 9 бит
         ; UCR.RXB8 is девятый бит приёмника
         ; UCR.TXB8 is девыятый бит передатчика
         ; UBRR бот генератор
         ; Для кварца 4МГц
         ; UBRR = 12 is 19200
         ; UBRR = 25 is 9600
         ; UBRR = 51 is 4800
         ; UBRR = 103 is 2400
         
         ;*****************************************************************
         ; установка скорости сериального интерфейса
         
          .equ	rate19200 =	12
          .equ	rate9600  =	25
          .equ	rate4800  =	51
          .equ	rate2400  =	103
         
          set_speed:
00000c e00c      	ldi	t0,rate19200
00000d b909      	out	UBRR,t0
00000e 9508      	ret
         
          com_ena:
00000f 9a54      	sbi	UCR,RXEN
000010 9a53      	sbi	UCR,TXEN
000011 e30e      	ldi	t0,'>'
000012 b90c      	out	UDR,t0
000013 9508      	ret
         	
         ;*****************************************************************
         ; Управление шиной Адреса-Данные
          .equ	port_adl =	PORTA
          .equ	port_adh =	PORTB
          .equ	portin_adl =	PINA
          .equ	portin_adh =	PINB
          .equ	dir_adl =	DDRA
          .equ	dir_adh =	DDRB
         
000014 ef0f      dir_o:	ldi	t0,255
000015 bb0a      	out	dir_adl,t0
000016 bb07      	out	dir_adh,t0
000017 9508      	ret
         
          dir_i:	
000018 2700      	clr	t0
000019 bb0a      	out	dir_adl,t0
00001a bb07      	out	dir_adh,t0
00001b 9508      	ret
         
         ;*****************************************************************
         ; Манипулирование стробами адресов
         
          .equ	port_control =	PORTC
          .equ	dir_control =	DDRC
          .equ	balel =	0
          .equ	baleh =	1
          .equ	bwr = 	2
          .equ	brd =	3
          .equ	breset= 7
         
          control_init:
00001c ef0f      	ldi	t0,255
00001d bb04      	out	dir_control,t0
00001e 9508      	ret
         
          aleh1:
00001f 9aa9      	sbi	port_control,baleh
000020 9508      	ret
          aleh0:
000021 98a9      	cbi	port_control,baleh
000022 9508      	ret
          alel1:
000023 9aa8      	sbi	port_control,balel
000024 9508      	ret
          alel0:
000025 98a8      	cbi	port_control,balel
000026 9508      	ret
          wr1:
000027 9aaa      	sbi	port_control,bwr
000028 9508      	ret
          wr0:
000029 98aa      	cbi	port_control,bwr
00002a 9508      	ret
          rd1:
00002b 9aab      	sbi	port_control,brd
00002c 9508      	ret
          rd0:
00002d 98ab      	cbi	port_control,brd
00002e 9508      	ret
          res1:
00002f 9aaf      	sbi	port_control,breset
000030 9508      	ret
          res0:
000031 98af      	cbi	port_control,breset
000032 9508      	ret
         ;*****************************************************************
         ; Установка адреса для доступа во FLASH
         
          .def	Lal =	r28
          .def    Lah =	r29
          .def	Hal =	r30
          .def    Hah =	r31
         
          address:
000033 dfeb      	rcall	aleh1		; Строб aleh
000034 dfee      	rcall	alel1
000035 dfde      	rcall	dir_o		; На вывод
000036 bbeb      	out	port_adl,Hal	; Адрес выдать
000037 bbf8      	out	port_adh,Hah
000038 dfe8      	rcall	aleh0	
000039 bbcb      	out	port_adl,Lal	; Адрес выдать
00003a bbd8      	out	port_adh,Lah
00003b dfe9      	rcall	alel0		; Строб alel
00003c 9508      	ret
         
          inc_address:
00003d e002      	ldi	t0,2
00003e 0fc0      	add	Lal,t0
00003f e000      	ldi	t0,0
000040 1fd0      	adc	Lah,t0
000041 1fe0      	adc	Hal,t0
000042 1ff0      	adc	Hah,t0
000043 9508      	ret
         	
         ;*****************************************************************
         ; читаем слово в dl и dh
         
          .def	dl =	r26
          .def    dh =	r27
          
          read_word:
000044 dfee      	rcall	address		; установили адрес
          read_wordnext:
000045 dfd2      	rcall	dir_i		; на ввод
000046 dfe6      	rcall	rd0		; rd to 0
000047 b3a9      	in	dl,portin_adl
000048 b3b6      	in	dh,portin_adh
000049 dfe1      	rcall	rd1		; rd to 1
00004a 9508      	ret
         	
         
         ;*****************************************************************
         ; пишем слово из dl и dh
          
          write_word:
00004b dfe7      	rcall	address		; установили адрес
00004c bbab      	out	port_adl,dl
00004d bbb8      	out	port_adh,dh
00004e dfda      	rcall	wr0		; rd to 0
00004f 0000      	nop
000050 0000      	nop
000051 dfd5      	rcall	wr1		; rd to 1
000052 9508      	ret
         
         ;*****************************************************************
         ; программируем FLASH из dl-dh
         
         ; установка адреса в сонстанты
          a0000:
000053 27cc      	clr	Lal
000054 27dd      	clr	Lah
000055 27ee      	clr	Hal
000056 27ff      	clr	Hah
000057 9508      	ret
          a5555:
000058 eaca      	ldi	Lal,LOW((0x5555<<1))
000059 eada      	ldi	Lah,HIGH((0x5555<<1))
00005a 9508      	ret
          a2AAA:
00005b e5c4      	ldi	Lal,LOW((0x2AAA<<1))
00005c e5d5      	ldi	Lah,HIGH((0x2AAA<<1))
00005d 9508      	ret
         ; установка данных в константы	
          d5555:
00005e e5a5      	ldi	dl,0x55
00005f e5b5      	ldi	dh,0x55
000060 9508      	ret
          dAAAA:
000061 eaaa      	ldi	dl,0xAA
000062 eaba      	ldi	dh,0xAA
000063 9508      	ret
          dFFFF:
000064 efaf      	ldi	dl,0xFF
000065 efbf      	ldi	dh,0xFF
000066 9508      	ret
          dA0A0:
000067 eaa0      	ldi	dl,0xA0
000068 eab0      	ldi	dh,0xA0
000069 9508      	ret
          d8080:
00006a e8a0      	ldi	dl,0x80
00006b e8b0      	ldi	dh,0x80
00006c 9508      	ret
          d1010:
00006d e1a0      	ldi	dl,0x10
00006e e1b0      	ldi	dh,0x10
00006f 9508      	ret
          d3030:
000070 e3a0      	ldi	dl,0x30
000071 e3b0      	ldi	dh,0x30
000072 9508      	ret
         ; само программирование		
          prog_word:
000073 93af      	push	dl
000074 93bf      	push	dh
000075 93cf      	push	Lal
000076 93df      	push	Lah
000077 93ef      	push	Hal
000078 93ff      	push	Hah
000079 dfde      	rcall	a5555
00007a dfe6      	rcall	dAAAA
00007b dfcf      	rcall	write_word
00007c dfde      	rcall	a2AAA
00007d dfe0      	rcall	d5555
00007e dfcc      	rcall	write_word
00007f dfd8      	rcall	a5555
000080 dfe6      	rcall	dA0A0	
000081 dfc9      	rcall	write_word
000082 91ff      	pop	Hah
000083 91ef      	pop	Hal
000084 91df      	pop	Lah
000085 91cf      	pop	Lal
000086 91bf      	pop	dh
000087 91af      	pop	dl
000088 dfc2      	rcall	write_word
000089 d001      	rcall	data_polling
00008a 9508      	ret
         ; ожидание завершения
          data_polling:
00008b 2f2a      	mov	s0,dl
00008c 2f3b      	mov	s1,dh
          d_p_0:
00008d dfb6      	rcall	read_word
00008e 27a2      	eor	dl,s0
00008f 27b3      	eor	dh,s1
000090 2bab      	or	dl,dh
000091 f7d9      	brne	d_p_0		; если T = 1 повторяем
000092 2fa2      	mov	dl,s0
000093 2fb3      	mov	dh,s1
000094 9508      	ret 
         ;*****************************************************************
         ; очистка сектора
          clr_sec:
000095 93cf      	push	Lal
000096 93df      	push	Lah
000097 93ef      	push	Hal
000098 93ff      	push	Hah
000099 dfbe      	rcall	a5555
00009a dfc6      	rcall	dAAAA
00009b dfaf      	rcall	write_word
00009c dfbe      	rcall	a2AAA
00009d dfc0      	rcall	d5555
00009e dfac      	rcall	write_word
00009f dfb8      	rcall	a5555
0000a0 dfc9      	rcall	d8080	
0000a1 dfa9      	rcall	write_word
0000a2 dfb5      	rcall	a5555
0000a3 dfbd      	rcall	dAAAA
0000a4 dfa6      	rcall	write_word
0000a5 dfb5      	rcall	a2AAA
0000a6 dfb7      	rcall	d5555
0000a7 dfa3      	rcall	write_word
0000a8 91ff      	pop	Hah
0000a9 91ef      	pop	Hal
0000aa 91df      	pop	Lah
0000ab 91cf      	pop	Lal
0000ac dfc3      	rcall	d3030
0000ad df9d      	rcall	write_word
0000ae dfb5      	rcall	dFFFF
0000af dfdb      	rcall	data_polling
0000b0 9508      	ret
         
         ;*****************************************************************
         ; очистка Микросхемы полностью
          clr_chip:
0000b1 93cf      	push	Lal
0000b2 93df      	push	Lah
0000b3 93ef      	push	Hal
0000b4 93ff      	push	Hah
0000b5 dfa2      	rcall	a5555
0000b6 dfaa      	rcall	dAAAA
0000b7 df93      	rcall	write_word
0000b8 dfa2      	rcall	a2AAA
0000b9 dfa4      	rcall	d5555
0000ba df90      	rcall	write_word
0000bb df9c      	rcall	a5555
0000bc dfad      	rcall	d8080	
0000bd df8d      	rcall	write_word
0000be df99      	rcall	a5555
0000bf dfa1      	rcall	dAAAA
0000c0 df8a      	rcall	write_word
0000c1 df99      	rcall	a2AAA
0000c2 df9b      	rcall	d5555
0000c3 df87      	rcall	write_word
0000c4 df93      	rcall	a5555
0000c5 dfa7      	rcall	d1010
0000c6 df84      	rcall	write_word
0000c7 df9c      	rcall	dFFFF
0000c8 dfc2      	rcall	data_polling
0000c9 91ff      	pop	Hah
0000ca 91ef      	pop	Hal
0000cb 91df      	pop	Lah
0000cc 91cf      	pop	Lal
0000cd 9508      	ret
         ;*****************************************************************
         ;	Принять байт
          read_byte:
0000ce 9b5f      	sbis	USR,RXC
0000cf cffe      	rjmp	read_byte
0000d0 b12c      	in	s0,UDR
0000d1 9508      	ret
         
          read_char:
0000d2 dffb      	rcall	read_byte
0000d3 3220      	cpi	s0,' '
0000d4 f3e8      	brlo	read_char	; < 0x20
0000d5 9508      	ret
         	
         ;*****************************************************************
         ; 	Передать байт
          write_byte:
0000d6 9b5d      	sbis	USR,UDRE
0000d7 cffe      	rjmp	write_byte
0000d8 b92c      	out	UDR,s0
0000d9 9508      	ret
         
         ;*****************************************************************
         ; прочитать адресс
          read_address:
0000da d007      	rcall	clr_address
0000db d01f      	rcall	rladdress
0000dc d01e      	rcall	rladdress
0000dd d01d      	rcall	rladdress
0000de d01c      	rcall	rladdress
0000df d01b      	rcall	rladdress
0000e0 d01a      	rcall	rladdress
0000e1 9508      	ret
         
          clr_address:
0000e2 27cc      	clr	Lal
0000e3 27dd      	clr	Lah
0000e4 27ee      	clr	Hal
0000e5 27ff      	clr	Hah
0000e6 9508      	ret
         
         ;*****************************************************************
         ; прочитать данные
          read_data:
0000e7 d005      	rcall	clr_data
0000e8 d01e      	rcall	rldata
0000e9 d01d      	rcall	rldata
0000ea d01c      	rcall	rldata
0000eb d01b      	rcall	rldata
0000ec 9508      	ret
         
          clr_data:
0000ed 27aa      	clr	dl
0000ee 27bb      	clr	dh
0000ef 9508      	ret
         
         ;*****************************************************************
         ; преобразовать символ в число
          char_to_byte:
0000f0 772f      	andi	s0,0x7F	
0000f1 3621      	cpi	s0,'a'
0000f2 f008      	brlo	hichar
0000f3 5220      	subi	s0,0x20
          hichar:
0000f4 3329      	cpi	s0,'9'
0000f5 f019      	breq	digit		; s0 == 9
0000f6 f010      	brlo	digit		; s0 < 9
0000f7 5327      	subi	s0,'A' - 10	; s0 > 9
0000f8 9508      	ret
          digit:
0000f9 5320      	subi	s0,'0'		; s0 =<9
0000fa 9508      	ret
         	
         ;*****************************************************************
         ; добавить число к адресу
         ; address = SHIFTLEFT ( address,4 ) or s0
          rladdress:
0000fb dfd6      	rcall	read_char
0000fc dfd9      	rcall	write_byte
0000fd dff2      	rcall	char_to_byte	; s0 = number ( s0 )
0000fe e004      	ldi	t0,4		; for t0=4 to 0
          rl_0:
0000ff 0fcc      	lsl	Lal
000100 1fdd      	rol	Lah
000101 1fee      	rol	Hal
000102 1fff      	rol	Hah		; shiftleft ( address )
000103 950a      	dec	t0
000104 f7d1      	brne	rl_0
         	
000105 2bc2      	or	Lal,s0		; address # s0
000106 9508      	ret
         	
         ;*****************************************************************
         ; добавить число к адресу
         ; data = SHIFTLEFT ( data,4 ) or s0
          rldata:
000107 dfca      	rcall	read_char
000108 dfcd      	rcall	write_byte
000109 dfe6      	rcall	char_to_byte	; s0 = number ( s0 )
00010a e004      	ldi	t0,4		; for t0=4 to 0
          rl_d0:
00010b 0faa      	lsl	dl
00010c 1fbb      	rol	dh		; shiftleft ( address )
00010d 950a      	dec	t0
00010e f7e1      	brne	rl_d0
         	
00010f 2ba2      	or	dl,s0		; address # s0
000110 9508      	ret
         ;*****************************************************************
         ; передача данных назад
          send_data:
000111 2f2b      	mov	s0,dh
000112 d00b      	rcall	bintohex
000113 2f25      	mov	s0,s3
000114 dfc1      	rcall	write_byte
000115 2f24      	mov	s0,s2
000116 dfbf      	rcall	write_byte
         		
000117 2f2a      	mov	s0,dl
000118 d005      	rcall	bintohex
000119 2f25      	mov	s0,s3
00011a dfbb      	rcall	write_byte
00011b 2f24      	mov	s0,s2
00011c dfb9      	rcall	write_byte
00011d 9508      	ret
         
          bintohex:
00011e 2f32      	mov	s1,s0
00011f d006      	rcall	b2h
000120 2f42      	mov	s2,s0		; s2 = hex ( s0 and 0xF )
000121 2f23      	mov	s0,s1
000122 9522      	swap	s0		; теперь старшую тетраду
000123 d002      	rcall	b2h
000124 2f52      	mov	s3,s0		; s3 = hex ( shifright( s0,4) and 0xF) 
000125 9508      	ret
         	
          b2h:
000126 702f      	andi	s0,0xF		; младшая тетрада
000127 302a      	cpi	s0,0xA
000128 f010      	brlo	b2h_digit	; < 0xA
000129 5c29      	subi	s0,0-'A'+ 10
00012a 9508      	ret
          b2h_digit:
00012b 5d20      	subi	s0,0-'0'
00012c 9508      	ret
         	
         ;*****************************************************************
         ; Программирование микросхемы полностью
         
          prog_all:
00012d d018      	rcall	counter_set
          p_a_0:
00012e df9f      	rcall	read_byte
00012f dfa6      	rcall   write_byte
000130 2fa2      	mov	dl,s0
000131 df9c      	rcall	read_byte
000132 2fb2      	mov	dh,s0
000133 df3f      	rcall	prog_word
000134 2f2b      	mov	s0,dh
000135 dfa0      	rcall	write_byte
000136 df06      	rcall	inc_address
000137 d011      	rcall	dec_counter
000138 f7a8      	brcc	p_a_0		
000139 9508      	ret
         	
         ;*****************************************************************
         ; Чтение микросхемы полностью
          read_all:
00013a d00b      	rcall	counter_set
          r_a_0:
00013b df08      	rcall	read_word
00013c 2f2a      	mov	s0,dl
00013d df98      	rcall	write_byte
00013e df8f      	rcall	read_byte
00013f 2f2b      	mov	s0,dh
000140 df95      	rcall	write_byte
000141 df8c      	rcall	read_byte
000142 defa      	rcall	inc_address
000143 d005      	rcall	dec_counter
000144 f7b0      	brcc	r_a_0		
000145 9508      	ret
         
         
          counter_set:
000146 ef6f      	ldi	c0,0xFF
000147 ef7f      	ldi	c1,0xFF
000148 9508      	ret
         	
          dec_counter:
000149 5062      	subi	c0,2
00014a 4070      	sbci	c1,0
00014b 9508      	ret
         ;*****************************************************************
         ; Проверка контрольной суммы
          crc_all:
00014c 27cc      	clr	Lal
00014d 27dd      	clr	Lah
00014e dff7      	rcall	counter_set
00014f d00c      	rcall	crc_clr
          crc_a_0:
000150 def3      	rcall	read_word
000151 d007      	rcall	crc_add
000152 deea      	rcall	inc_address
000153 dff5      	rcall	dec_counter
000154 f7d8      	brcc	crc_a_0	
000155 2fa8      	mov	dl,crcl
000156 2fb9      	mov	dh,crch	
000157 dfb9      	rcall	send_data
000158 9508      	ret
         		
          crc_add:
000159 0f8a      	add	crcl,dl
00015a 1f9b      	adc	crch,dh
00015b 9508      	ret
          crc_clr:
00015c 2788      	clr	crcl
00015d 2799      	clr	crch
00015e 9508      	ret	
         ;*****************************************************************
         ; КОММАНДЕР
         
          command:
00015f df72      	rcall	read_char
000160 df75      	rcall	write_byte
000161 3520      	cpi	s0,'P'
000162 f251      	breq	prog_all
000163 3728      	cpi	s0,'x'
000164 f339      	breq	crc_all
000165 3522      	cpi	s0,'R'
000166 f299      	breq	read_all
000167 3722      	cpi	s0,'r'
000168 f0f1      	breq	com_r
000169 3727      	cpi	s0,'w'
00016a f0c9      	breq	com_w
00016b 322b      	cpi	s0,'+'
00016c f101      	breq	com_plus
00016d 3621      	cpi	s0,'a'
00016e f0d9      	breq	com_a
00016f 3629      	cpi	s0,'i'
000170 f0f9      	breq	com_init
000171 3720      	cpi	s0,'p'
000172 f071      	breq	com_prog
000173 3625      	cpi	s0,'e'
000174 f121      	breq	com_echo
000175 3724      	cpi	s0,'t'
000176 f129      	breq	com_seta
000177 3623      	cpi	s0,'c'
000178 f129      	breq	com_clrs
000179 3423      	cpi	s0,'C'
00017a f129      	breq	com_clrchip
00017b 362e      	cpi	s0,'n'
00017c f129      	breq	com_next
00017d 9508      	ret
          prompt:
00017e e32e      	ldi	s0,'>'
00017f df56      	rcall	write_byte
000180 9508      	ret
         ;*****************************************************************
         ; перечень команд
          com_prog:
000181 df65      	rcall	read_data
000182 def0      	rcall	prog_word
000183 9508      	ret
          com_w:
000184 df62      	rcall	read_data
000185 dec5      	rcall	write_word
000186 9508      	ret
          com_r:
000187 debc      	rcall	read_word
000188 df88      	rcall	send_data
000189 9508      	ret
          com_a:
00018a df4f      	rcall	read_address
00018b dea7      	rcall	address
00018c 9508      	ret
         	
          com_plus:
00018d deaf      	rcall	inc_address
00018e dea4      	rcall	address
00018f cff7      	rjmp	com_r
         
          com_init:
000190 dea0      	rcall	res0
000191 0000      	nop
000192 de8e      	rcall	aleh0
000193 de91      	rcall	alel0
000194 de92      	rcall	wr1
000195 de95      	rcall	rd1
000196 0000      	nop
000197 de97      	rcall	res1
000198 9508      	ret
         	
          com_echo:
000199 df34      	rcall	read_byte
00019a df3b      	rcall	write_byte
00019b cffd      	rjmp	com_echo
         			
          com_seta:
00019c de96      	rcall	address
00019d cffe      	rjmp	com_seta
         	
          com_clrs:
00019e def6      	rcall	clr_sec
00019f 9508      	ret
         
          com_clrchip:
0001a0 df10      	rcall	clr_chip
0001a1 9508      	ret
         
          com_next:
0001a2 dea2      	rcall	read_wordnext
0001a3 df6d      	rcall	send_data
0001a4 9508      	ret
         ;*****************************************************************
         ;*****************************************************************
         
          main:
0001a5 e50f      	ldi	t0,LOW(RAMEND)
0001a6 bf0d      	out	SPL,t0
0001a7 e001      	ldi	t0,HIGH(RAMEND)
0001a8 bf0e      	out	SPH,t0
0001a9 de62      	rcall	set_speed	; Установили скорость работы Сериального порта
0001aa de64      	rcall	com_ena		; включили ком порт
0001ab de70      	rcall	control_init
0001ac dfe3      	rcall	com_init
          loop:
0001ad dfb1      	rcall	command
0001ae dfcf      	rcall	prompt
0001af cffd      	rjmp	loop
0001b0 9508      	ret
         
         
         	
Assembly complete with no errors.
